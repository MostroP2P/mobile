// Mocks generated by Mockito 5.4.4 from annotations
// in mostro_mobile/test/services/mostro_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dart_nostr/dart_nostr.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;
import 'package:mostro_mobile/data/models/session.dart' as _i3;
import 'package:mostro_mobile/data/repositories/session_manager.dart' as _i7;
import 'package:mostro_mobile/services/nostr_service.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeNostrKeyPairs_0 extends _i1.SmartFake implements _i2.NostrKeyPairs {
  _FakeNostrKeyPairs_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNostrEvent_1 extends _i1.SmartFake implements _i2.NostrEvent {
  _FakeNostrEvent_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSession_2 extends _i1.SmartFake implements _i3.Session {
  _FakeSession_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [NostrService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNostrService extends _i1.Mock implements _i4.NostrService {
  MockNostrService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isInitialized => (super.noSuchMethod(
        Invocation.getter(#isInitialized),
        returnValue: false,
      ) as bool);

  @override
  _i5.Future<void> init() => (super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> publishEvent(_i2.NostrEvent? event) => (super.noSuchMethod(
        Invocation.method(
          #publishEvent,
          [event],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Stream<_i2.NostrEvent> subscribeToEvents(_i2.NostrFilter? filter) =>
      (super.noSuchMethod(
        Invocation.method(
          #subscribeToEvents,
          [filter],
        ),
        returnValue: _i5.Stream<_i2.NostrEvent>.empty(),
      ) as _i5.Stream<_i2.NostrEvent>);

  @override
  _i5.Future<void> disconnectFromRelays() => (super.noSuchMethod(
        Invocation.method(
          #disconnectFromRelays,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<_i2.NostrKeyPairs> generateKeyPair() => (super.noSuchMethod(
        Invocation.method(
          #generateKeyPair,
          [],
        ),
        returnValue: _i5.Future<_i2.NostrKeyPairs>.value(_FakeNostrKeyPairs_0(
          this,
          Invocation.method(
            #generateKeyPair,
            [],
          ),
        )),
      ) as _i5.Future<_i2.NostrKeyPairs>);

  @override
  _i2.NostrKeyPairs generateKeyPairFromPrivateKey(String? privateKey) =>
      (super.noSuchMethod(
        Invocation.method(
          #generateKeyPairFromPrivateKey,
          [privateKey],
        ),
        returnValue: _FakeNostrKeyPairs_0(
          this,
          Invocation.method(
            #generateKeyPairFromPrivateKey,
            [privateKey],
          ),
        ),
      ) as _i2.NostrKeyPairs);

  @override
  String getMostroPubKey() => (super.noSuchMethod(
        Invocation.method(
          #getMostroPubKey,
          [],
        ),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.method(
            #getMostroPubKey,
            [],
          ),
        ),
      ) as String);

  @override
  _i5.Future<_i2.NostrEvent> createNIP59Event(
    String? content,
    String? recipientPubKey,
    String? senderPrivateKey,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #createNIP59Event,
          [
            content,
            recipientPubKey,
            senderPrivateKey,
          ],
        ),
        returnValue: _i5.Future<_i2.NostrEvent>.value(_FakeNostrEvent_1(
          this,
          Invocation.method(
            #createNIP59Event,
            [
              content,
              recipientPubKey,
              senderPrivateKey,
            ],
          ),
        )),
      ) as _i5.Future<_i2.NostrEvent>);

  @override
  _i5.Future<_i2.NostrEvent> decryptNIP59Event(
    _i2.NostrEvent? event,
    String? privateKey,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #decryptNIP59Event,
          [
            event,
            privateKey,
          ],
        ),
        returnValue: _i5.Future<_i2.NostrEvent>.value(_FakeNostrEvent_1(
          this,
          Invocation.method(
            #decryptNIP59Event,
            [
              event,
              privateKey,
            ],
          ),
        )),
      ) as _i5.Future<_i2.NostrEvent>);

  @override
  _i5.Future<String> createRumor(
    _i2.NostrKeyPairs? senderKeyPair,
    String? wrapperKey,
    String? recipientPubKey,
    String? content,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #createRumor,
          [
            senderKeyPair,
            wrapperKey,
            recipientPubKey,
            content,
          ],
        ),
        returnValue: _i5.Future<String>.value(_i6.dummyValue<String>(
          this,
          Invocation.method(
            #createRumor,
            [
              senderKeyPair,
              wrapperKey,
              recipientPubKey,
              content,
            ],
          ),
        )),
      ) as _i5.Future<String>);

  @override
  _i5.Future<String> createSeal(
    _i2.NostrKeyPairs? senderKeyPair,
    String? wrapperKey,
    String? recipientPubKey,
    String? encryptedContent,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #createSeal,
          [
            senderKeyPair,
            wrapperKey,
            recipientPubKey,
            encryptedContent,
          ],
        ),
        returnValue: _i5.Future<String>.value(_i6.dummyValue<String>(
          this,
          Invocation.method(
            #createSeal,
            [
              senderKeyPair,
              wrapperKey,
              recipientPubKey,
              encryptedContent,
            ],
          ),
        )),
      ) as _i5.Future<String>);

  @override
  _i5.Future<_i2.NostrEvent> createWrap(
    _i2.NostrKeyPairs? wrapperKeyPair,
    String? sealedContent,
    String? recipientPubKey,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #createWrap,
          [
            wrapperKeyPair,
            sealedContent,
            recipientPubKey,
          ],
        ),
        returnValue: _i5.Future<_i2.NostrEvent>.value(_FakeNostrEvent_1(
          this,
          Invocation.method(
            #createWrap,
            [
              wrapperKeyPair,
              sealedContent,
              recipientPubKey,
            ],
          ),
        )),
      ) as _i5.Future<_i2.NostrEvent>);
}

/// A class which mocks [SessionManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockSessionManager extends _i1.Mock implements _i7.SessionManager {
  MockSessionManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get sessionExpirationHours => (super.noSuchMethod(
        Invocation.getter(#sessionExpirationHours),
        returnValue: 0,
      ) as int);

  @override
  List<_i3.Session> get sessions => (super.noSuchMethod(
        Invocation.getter(#sessions),
        returnValue: <_i3.Session>[],
      ) as List<_i3.Session>);

  @override
  _i5.Future<void> init() => (super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<_i3.Session> newSession({String? orderId}) => (super.noSuchMethod(
        Invocation.method(
          #newSession,
          [],
          {#orderId: orderId},
        ),
        returnValue: _i5.Future<_i3.Session>.value(_FakeSession_2(
          this,
          Invocation.method(
            #newSession,
            [],
            {#orderId: orderId},
          ),
        )),
      ) as _i5.Future<_i3.Session>);

  @override
  _i5.Future<void> saveSession(_i3.Session? session) => (super.noSuchMethod(
        Invocation.method(
          #saveSession,
          [session],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i3.Session? getSessionByOrderId(String? orderId) =>
      (super.noSuchMethod(Invocation.method(
        #getSessionByOrderId,
        [orderId],
      )) as _i3.Session?);

  @override
  _i5.Future<_i3.Session?> loadSession(int? keyIndex) => (super.noSuchMethod(
        Invocation.method(
          #loadSession,
          [keyIndex],
        ),
        returnValue: _i5.Future<_i3.Session?>.value(),
      ) as _i5.Future<_i3.Session?>);

  @override
  _i5.Future<void> deleteSession(int? sessionId) => (super.noSuchMethod(
        Invocation.method(
          #deleteSession,
          [sessionId],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> clearExpiredSessions() => (super.noSuchMethod(
        Invocation.method(
          #clearExpiredSessions,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
