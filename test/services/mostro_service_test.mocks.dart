// Mocks generated by Mockito 5.4.5 from annotations
// in mostro_mobile/test/services/mostro_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:dart_nostr/dart_nostr.dart' as _i3;
import 'package:dart_nostr/nostr/model/relay_informations.dart' as _i7;
import 'package:flutter_riverpod/flutter_riverpod.dart' as _i11;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i8;
import 'package:mostro_mobile/data/models/session.dart' as _i4;
import 'package:mostro_mobile/data/repositories/session_manager.dart' as _i9;
import 'package:mostro_mobile/features/settings/settings.dart' as _i2;
import 'package:mostro_mobile/services/nostr_service.dart' as _i5;
import 'package:mostro_mobile/shared/notifiers/session_notifier.dart' as _i10;
import 'package:state_notifier/state_notifier.dart' as _i12;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSettings_0 extends _i1.SmartFake implements _i2.Settings {
  _FakeSettings_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeNostrKeyPairs_1 extends _i1.SmartFake implements _i3.NostrKeyPairs {
  _FakeNostrKeyPairs_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeNostrEvent_2 extends _i1.SmartFake implements _i3.NostrEvent {
  _FakeNostrEvent_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeSession_3 extends _i1.SmartFake implements _i4.Session {
  _FakeSession_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [NostrService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNostrService extends _i1.Mock implements _i5.NostrService {
  MockNostrService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Settings get settings =>
      (super.noSuchMethod(
            Invocation.getter(#settings),
            returnValue: _FakeSettings_0(this, Invocation.getter(#settings)),
          )
          as _i2.Settings);

  @override
  set settings(_i2.Settings? _settings) => super.noSuchMethod(
    Invocation.setter(#settings, _settings),
    returnValueForMissingStub: null,
  );

  @override
  bool get isInitialized =>
      (super.noSuchMethod(Invocation.getter(#isInitialized), returnValue: false)
          as bool);

  @override
  _i6.Future<void> init() =>
      (super.noSuchMethod(
            Invocation.method(#init, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> updateSettings(_i2.Settings? newSettings) =>
      (super.noSuchMethod(
            Invocation.method(#updateSettings, [newSettings]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<_i7.RelayInformations?> getRelayInfo(String? relayUrl) =>
      (super.noSuchMethod(
            Invocation.method(#getRelayInfo, [relayUrl]),
            returnValue: _i6.Future<_i7.RelayInformations?>.value(),
          )
          as _i6.Future<_i7.RelayInformations?>);

  @override
  _i6.Future<void> publishEvent(_i3.NostrEvent? event) =>
      (super.noSuchMethod(
            Invocation.method(#publishEvent, [event]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Stream<_i3.NostrEvent> subscribeToEvents(_i3.NostrFilter? filter) =>
      (super.noSuchMethod(
            Invocation.method(#subscribeToEvents, [filter]),
            returnValue: _i6.Stream<_i3.NostrEvent>.empty(),
          )
          as _i6.Stream<_i3.NostrEvent>);

  @override
  _i6.Future<void> disconnectFromRelays() =>
      (super.noSuchMethod(
            Invocation.method(#disconnectFromRelays, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<_i3.NostrKeyPairs> generateKeyPair() =>
      (super.noSuchMethod(
            Invocation.method(#generateKeyPair, []),
            returnValue: _i6.Future<_i3.NostrKeyPairs>.value(
              _FakeNostrKeyPairs_1(
                this,
                Invocation.method(#generateKeyPair, []),
              ),
            ),
          )
          as _i6.Future<_i3.NostrKeyPairs>);

  @override
  _i3.NostrKeyPairs generateKeyPairFromPrivateKey(String? privateKey) =>
      (super.noSuchMethod(
            Invocation.method(#generateKeyPairFromPrivateKey, [privateKey]),
            returnValue: _FakeNostrKeyPairs_1(
              this,
              Invocation.method(#generateKeyPairFromPrivateKey, [privateKey]),
            ),
          )
          as _i3.NostrKeyPairs);

  @override
  String getMostroPubKey() =>
      (super.noSuchMethod(
            Invocation.method(#getMostroPubKey, []),
            returnValue: _i8.dummyValue<String>(
              this,
              Invocation.method(#getMostroPubKey, []),
            ),
          )
          as String);

  @override
  _i6.Future<_i3.NostrEvent> createNIP59Event(
    String? content,
    String? recipientPubKey,
    String? senderPrivateKey,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#createNIP59Event, [
              content,
              recipientPubKey,
              senderPrivateKey,
            ]),
            returnValue: _i6.Future<_i3.NostrEvent>.value(
              _FakeNostrEvent_2(
                this,
                Invocation.method(#createNIP59Event, [
                  content,
                  recipientPubKey,
                  senderPrivateKey,
                ]),
              ),
            ),
          )
          as _i6.Future<_i3.NostrEvent>);

  @override
  _i6.Future<_i3.NostrEvent> decryptNIP59Event(
    _i3.NostrEvent? event,
    String? privateKey,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#decryptNIP59Event, [event, privateKey]),
            returnValue: _i6.Future<_i3.NostrEvent>.value(
              _FakeNostrEvent_2(
                this,
                Invocation.method(#decryptNIP59Event, [event, privateKey]),
              ),
            ),
          )
          as _i6.Future<_i3.NostrEvent>);

  @override
  _i6.Future<String> createRumor(
    _i3.NostrKeyPairs? senderKeyPair,
    String? wrapperKey,
    String? recipientPubKey,
    String? content,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#createRumor, [
              senderKeyPair,
              wrapperKey,
              recipientPubKey,
              content,
            ]),
            returnValue: _i6.Future<String>.value(
              _i8.dummyValue<String>(
                this,
                Invocation.method(#createRumor, [
                  senderKeyPair,
                  wrapperKey,
                  recipientPubKey,
                  content,
                ]),
              ),
            ),
          )
          as _i6.Future<String>);

  @override
  _i6.Future<String> createSeal(
    _i3.NostrKeyPairs? senderKeyPair,
    String? wrapperKey,
    String? recipientPubKey,
    String? encryptedContent,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#createSeal, [
              senderKeyPair,
              wrapperKey,
              recipientPubKey,
              encryptedContent,
            ]),
            returnValue: _i6.Future<String>.value(
              _i8.dummyValue<String>(
                this,
                Invocation.method(#createSeal, [
                  senderKeyPair,
                  wrapperKey,
                  recipientPubKey,
                  encryptedContent,
                ]),
              ),
            ),
          )
          as _i6.Future<String>);

  @override
  _i6.Future<_i3.NostrEvent> createWrap(
    _i3.NostrKeyPairs? wrapperKeyPair,
    String? sealedContent,
    String? recipientPubKey,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#createWrap, [
              wrapperKeyPair,
              sealedContent,
              recipientPubKey,
            ]),
            returnValue: _i6.Future<_i3.NostrEvent>.value(
              _FakeNostrEvent_2(
                this,
                Invocation.method(#createWrap, [
                  wrapperKeyPair,
                  sealedContent,
                  recipientPubKey,
                ]),
              ),
            ),
          )
          as _i6.Future<_i3.NostrEvent>);
}

/// A class which mocks [SessionManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockSessionManager extends _i1.Mock implements _i9.SessionManager {
  MockSessionManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get sessionExpirationHours =>
      (super.noSuchMethod(
            Invocation.getter(#sessionExpirationHours),
            returnValue: 0,
          )
          as int);

  @override
  List<_i4.Session> get sessions =>
      (super.noSuchMethod(
            Invocation.getter(#sessions),
            returnValue: <_i4.Session>[],
          )
          as List<_i4.Session>);

  @override
  _i6.Future<void> init() =>
      (super.noSuchMethod(
            Invocation.method(#init, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> reset() =>
      (super.noSuchMethod(
            Invocation.method(#reset, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  void updateSettings(_i2.Settings? settings) => super.noSuchMethod(
    Invocation.method(#updateSettings, [settings]),
    returnValueForMissingStub: null,
  );

  @override
  _i6.Future<_i4.Session> newSession({String? orderId}) =>
      (super.noSuchMethod(
            Invocation.method(#newSession, [], {#orderId: orderId}),
            returnValue: _i6.Future<_i4.Session>.value(
              _FakeSession_3(
                this,
                Invocation.method(#newSession, [], {#orderId: orderId}),
              ),
            ),
          )
          as _i6.Future<_i4.Session>);

  @override
  _i6.Future<void> saveSession(_i4.Session? session) =>
      (super.noSuchMethod(
            Invocation.method(#saveSession, [session]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i4.Session? getSessionByOrderId(String? orderId) =>
      (super.noSuchMethod(Invocation.method(#getSessionByOrderId, [orderId]))
          as _i4.Session?);

  @override
  _i6.Future<_i4.Session?> loadSession(int? keyIndex) =>
      (super.noSuchMethod(
            Invocation.method(#loadSession, [keyIndex]),
            returnValue: _i6.Future<_i4.Session?>.value(),
          )
          as _i6.Future<_i4.Session?>);

  @override
  _i6.Future<void> deleteSession(int? sessionId) =>
      (super.noSuchMethod(
            Invocation.method(#deleteSession, [sessionId]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> clearExpiredSessions() =>
      (super.noSuchMethod(
            Invocation.method(#clearExpiredSessions, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [SessionNotifier].
///
/// See the documentation for Mockito's code generation for more information.
class MockSessionNotifier extends _i1.Mock implements _i10.SessionNotifier {
  MockSessionNotifier() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set onError(_i11.ErrorListener? _onError) => super.noSuchMethod(
    Invocation.setter(#onError, _onError),
    returnValueForMissingStub: null,
  );

  @override
  bool get mounted =>
      (super.noSuchMethod(Invocation.getter(#mounted), returnValue: false)
          as bool);

  @override
  _i6.Stream<List<_i4.Session>> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i6.Stream<List<_i4.Session>>.empty(),
          )
          as _i6.Stream<List<_i4.Session>>);

  @override
  List<_i4.Session> get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: <_i4.Session>[],
          )
          as List<_i4.Session>);

  @override
  set state(List<_i4.Session>? value) => super.noSuchMethod(
    Invocation.setter(#state, value),
    returnValueForMissingStub: null,
  );

  @override
  List<_i4.Session> get debugState =>
      (super.noSuchMethod(
            Invocation.getter(#debugState),
            returnValue: <_i4.Session>[],
          )
          as List<_i4.Session>);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  _i6.Future<_i4.Session> newSession({String? orderId}) =>
      (super.noSuchMethod(
            Invocation.method(#newSession, [], {#orderId: orderId}),
            returnValue: _i6.Future<_i4.Session>.value(
              _FakeSession_3(
                this,
                Invocation.method(#newSession, [], {#orderId: orderId}),
              ),
            ),
          )
          as _i6.Future<_i4.Session>);

  @override
  _i6.Future<void> reset() =>
      (super.noSuchMethod(
            Invocation.method(#reset, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  void refresh() => super.noSuchMethod(
    Invocation.method(#refresh, []),
    returnValueForMissingStub: null,
  );

  @override
  _i6.Future<void> saveSession(_i4.Session? session) =>
      (super.noSuchMethod(
            Invocation.method(#saveSession, [session]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> deleteSession(int? sessionId) =>
      (super.noSuchMethod(
            Invocation.method(#deleteSession, [sessionId]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i4.Session? getSessionByOrderId(String? orderId) =>
      (super.noSuchMethod(Invocation.method(#getSessionByOrderId, [orderId]))
          as _i4.Session?);

  @override
  _i6.Future<_i4.Session?> loadSession(int? keyIndex) =>
      (super.noSuchMethod(
            Invocation.method(#loadSession, [keyIndex]),
            returnValue: _i6.Future<_i4.Session?>.value(),
          )
          as _i6.Future<_i4.Session?>);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  bool updateShouldNotify(List<_i4.Session>? old, List<_i4.Session>? current) =>
      (super.noSuchMethod(
            Invocation.method(#updateShouldNotify, [old, current]),
            returnValue: false,
          )
          as bool);

  @override
  _i11.RemoveListener addListener(
    _i12.Listener<List<_i4.Session>>? listener, {
    bool? fireImmediately = true,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #addListener,
              [listener],
              {#fireImmediately: fireImmediately},
            ),
            returnValue: () {},
          )
          as _i11.RemoveListener);
}
