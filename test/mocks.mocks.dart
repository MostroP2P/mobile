// Mocks generated by Mockito 5.4.5 from annotations
// in mostro_mobile/test/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dart_nostr/dart_nostr.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mostro_mobile/data/models/enums/action.dart' as _i8;
import 'package:mostro_mobile/data/models/mostro_message.dart' as _i6;
import 'package:mostro_mobile/data/models/payload.dart' as _i7;
import 'package:mostro_mobile/data/models/session.dart' as _i2;
import 'package:mostro_mobile/data/repositories/mostro_repository.dart' as _i9;
import 'package:mostro_mobile/data/repositories/open_orders_repository.dart'
    as _i10;
import 'package:mostro_mobile/services/mostro_service.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSession_0 extends _i1.SmartFake implements _i2.Session {
  _FakeSession_0(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeNostrEvent_1 extends _i1.SmartFake implements _i3.NostrEvent {
  _FakeNostrEvent_1(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

/// A class which mocks [MostroService].
///
/// See the documentation for Mockito's code generation for more information.
class MockMostroService extends _i1.Mock implements _i4.MostroService {
  MockMostroService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Stream<_i6.MostroMessage<_i7.Payload>> subscribe(_i2.Session? session) =>
      (super.noSuchMethod(
        Invocation.method(#subscribe, [session]),
        returnValue: _i5.Stream<_i6.MostroMessage<_i7.Payload>>.empty(),
      ) as _i5.Stream<_i6.MostroMessage<_i7.Payload>>);

  @override
  _i2.Session? getSessionByOrderId(String? orderId) =>
      (super.noSuchMethod(Invocation.method(#getSessionByOrderId, [orderId]))
          as _i2.Session?);

  @override
  _i5.Future<_i2.Session> takeSellOrder(
    String? orderId,
    int? amount,
    String? lnAddress,
  ) =>
      (super.noSuchMethod(
        Invocation.method(#takeSellOrder, [orderId, amount, lnAddress]),
        returnValue: _i5.Future<_i2.Session>.value(
          _FakeSession_0(
            this,
            Invocation.method(#takeSellOrder, [orderId, amount, lnAddress]),
          ),
        ),
      ) as _i5.Future<_i2.Session>);

  @override
  _i5.Future<void> sendInvoice(String? orderId, String? invoice, int? amount) =>
      (super.noSuchMethod(
        Invocation.method(#sendInvoice, [orderId, invoice, amount]),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<_i2.Session> takeBuyOrder(String? orderId, int? amount) =>
      (super.noSuchMethod(
        Invocation.method(#takeBuyOrder, [orderId, amount]),
        returnValue: _i5.Future<_i2.Session>.value(
          _FakeSession_0(
            this,
            Invocation.method(#takeBuyOrder, [orderId, amount]),
          ),
        ),
      ) as _i5.Future<_i2.Session>);

  @override
  _i5.Future<_i2.Session> publishOrder(_i6.MostroMessage<_i7.Payload>? order) =>
      (super.noSuchMethod(
        Invocation.method(#publishOrder, [order]),
        returnValue: _i5.Future<_i2.Session>.value(
          _FakeSession_0(this, Invocation.method(#publishOrder, [order])),
        ),
      ) as _i5.Future<_i2.Session>);

  @override
  _i5.Future<void> cancelOrder(String? orderId) => (super.noSuchMethod(
        Invocation.method(#cancelOrder, [orderId]),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> sendFiatSent(String? orderId) => (super.noSuchMethod(
        Invocation.method(#sendFiatSent, [orderId]),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> releaseOrder(String? orderId) => (super.noSuchMethod(
        Invocation.method(#releaseOrder, [orderId]),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  Map<String, dynamic> newMessage(
    _i8.Action? actionType,
    String? orderId, {
    Object? payload,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #newMessage,
          [actionType, orderId],
          {#payload: payload},
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  _i5.Future<void> sendMessage(
    String? orderId,
    String? receiverPubkey,
    Map<String, dynamic>? content,
  ) =>
      (super.noSuchMethod(
        Invocation.method(#sendMessage, [orderId, receiverPubkey, content]),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<_i3.NostrEvent> createNIP59Event(
    String? content,
    String? recipientPubKey,
    _i2.Session? session,
  ) =>
      (super.noSuchMethod(
        Invocation.method(#createNIP59Event, [
          content,
          recipientPubKey,
          session,
        ]),
        returnValue: _i5.Future<_i3.NostrEvent>.value(
          _FakeNostrEvent_1(
            this,
            Invocation.method(#createNIP59Event, [
              content,
              recipientPubKey,
              session,
            ]),
          ),
        ),
      ) as _i5.Future<_i3.NostrEvent>);
}

/// A class which mocks [MostroRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockMostroRepository extends _i1.Mock implements _i9.MostroRepository {
  MockMostroRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i6.MostroMessage<_i7.Payload>> get allMessages => (super.noSuchMethod(
        Invocation.getter(#allMessages),
        returnValue: <_i6.MostroMessage<_i7.Payload>>[],
      ) as List<_i6.MostroMessage<_i7.Payload>>);

  @override
  _i5.Future<_i6.MostroMessage<_i7.Payload>?> getOrderById(String? orderId) =>
      (super.noSuchMethod(
        Invocation.method(#getOrderById, [orderId]),
        returnValue: _i5.Future<_i6.MostroMessage<_i7.Payload>?>.value(),
      ) as _i5.Future<_i6.MostroMessage<_i7.Payload>?>);

  @override
  _i5.Stream<_i6.MostroMessage<_i7.Payload>> resubscribeOrder(
    String? orderId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(#resubscribeOrder, [orderId]),
        returnValue: _i5.Stream<_i6.MostroMessage<_i7.Payload>>.empty(),
      ) as _i5.Stream<_i6.MostroMessage<_i7.Payload>>);

  @override
  _i5.Future<_i5.Stream<_i6.MostroMessage<_i7.Payload>>> takeSellOrder(
    String? orderId,
    int? amount,
    String? lnAddress,
  ) =>
      (super.noSuchMethod(
        Invocation.method(#takeSellOrder, [orderId, amount, lnAddress]),
        returnValue:
            _i5.Future<_i5.Stream<_i6.MostroMessage<_i7.Payload>>>.value(
          _i5.Stream<_i6.MostroMessage<_i7.Payload>>.empty(),
        ),
      ) as _i5.Future<_i5.Stream<_i6.MostroMessage<_i7.Payload>>>);

  @override
  _i5.Future<_i5.Stream<_i6.MostroMessage<_i7.Payload>>> takeBuyOrder(
    String? orderId,
    int? amount,
  ) =>
      (super.noSuchMethod(
        Invocation.method(#takeBuyOrder, [orderId, amount]),
        returnValue:
            _i5.Future<_i5.Stream<_i6.MostroMessage<_i7.Payload>>>.value(
          _i5.Stream<_i6.MostroMessage<_i7.Payload>>.empty(),
        ),
      ) as _i5.Future<_i5.Stream<_i6.MostroMessage<_i7.Payload>>>);

  @override
  _i5.Future<void> sendInvoice(String? orderId, String? invoice, int? amount) =>
      (super.noSuchMethod(
        Invocation.method(#sendInvoice, [orderId, invoice, amount]),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<_i5.Stream<_i6.MostroMessage<_i7.Payload>>> publishOrder(
    _i6.MostroMessage<_i7.Payload>? order,
  ) =>
      (super.noSuchMethod(
        Invocation.method(#publishOrder, [order]),
        returnValue:
            _i5.Future<_i5.Stream<_i6.MostroMessage<_i7.Payload>>>.value(
          _i5.Stream<_i6.MostroMessage<_i7.Payload>>.empty(),
        ),
      ) as _i5.Future<_i5.Stream<_i6.MostroMessage<_i7.Payload>>>);

  @override
  _i5.Future<void> cancelOrder(String? orderId) => (super.noSuchMethod(
        Invocation.method(#cancelOrder, [orderId]),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> saveMessages() => (super.noSuchMethod(
        Invocation.method(#saveMessages, []),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> saveMessage(_i6.MostroMessage<_i7.Payload>? message) =>
      (super.noSuchMethod(
        Invocation.method(#saveMessage, [message]),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> deleteMessage(String? messageId) => (super.noSuchMethod(
        Invocation.method(#deleteMessage, [messageId]),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> loadMessages() => (super.noSuchMethod(
        Invocation.method(#loadMessages, []),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(#dispose, []),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<void> addOrder(_i6.MostroMessage<_i7.Payload>? order) =>
      (super.noSuchMethod(
        Invocation.method(#addOrder, [order]),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> deleteOrder(String? orderId) => (super.noSuchMethod(
        Invocation.method(#deleteOrder, [orderId]),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<List<_i6.MostroMessage<_i7.Payload>>> getAllOrders() =>
      (super.noSuchMethod(
        Invocation.method(#getAllOrders, []),
        returnValue: _i5.Future<List<_i6.MostroMessage<_i7.Payload>>>.value(
          <_i6.MostroMessage<_i7.Payload>>[],
        ),
      ) as _i5.Future<List<_i6.MostroMessage<_i7.Payload>>>);

  @override
  _i5.Future<void> updateOrder(_i6.MostroMessage<_i7.Payload>? order) =>
      (super.noSuchMethod(
        Invocation.method(#updateOrder, [order]),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}

/// A class which mocks [OpenOrdersRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockOpenOrdersRepository extends _i1.Mock
    implements _i10.OpenOrdersRepository {
  MockOpenOrdersRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Stream<List<_i3.NostrEvent>> get eventsStream => (super.noSuchMethod(
        Invocation.getter(#eventsStream),
        returnValue: _i5.Stream<List<_i3.NostrEvent>>.empty(),
      ) as _i5.Stream<List<_i3.NostrEvent>>);

  @override
  List<_i3.NostrEvent> get currentEvents => (super.noSuchMethod(
        Invocation.getter(#currentEvents),
        returnValue: <_i3.NostrEvent>[],
      ) as List<_i3.NostrEvent>);

  @override
  void _subscribeToOrders() => super.noSuchMethod(
        Invocation.method(#subscribeToOrders, []),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(#dispose, []),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<_i3.NostrEvent?> getOrderById(String? orderId) =>
      (super.noSuchMethod(
        Invocation.method(#getOrderById, [orderId]),
        returnValue: _i5.Future<_i3.NostrEvent?>.value(),
      ) as _i5.Future<_i3.NostrEvent?>);

  @override
  _i5.Future<void> addOrder(_i3.NostrEvent? order) => (super.noSuchMethod(
        Invocation.method(#addOrder, [order]),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> deleteOrder(String? orderId) => (super.noSuchMethod(
        Invocation.method(#deleteOrder, [orderId]),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<List<_i3.NostrEvent>> getAllOrders() => (super.noSuchMethod(
        Invocation.method(#getAllOrders, []),
        returnValue: _i5.Future<List<_i3.NostrEvent>>.value(
          <_i3.NostrEvent>[],
        ),
      ) as _i5.Future<List<_i3.NostrEvent>>);

  @override
  _i5.Future<void> updateOrder(_i3.NostrEvent? order) => (super.noSuchMethod(
        Invocation.method(#updateOrder, [order]),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}
