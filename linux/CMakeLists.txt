# Project-level configuration.
if(NOT CMAKE_BUILD_TYPE)
  set(CMAKE_BUILD_TYPE Debug)
endif()

cmake_minimum_required(VERSION 3.10)

# Ensure the linker can locate libstdc++ when clang is configured for a newer
# GCC toolchain than the one installed on the host. This prevents the CMake
# compiler check from failing with `-lstdc++` missing (observed with clang 18
# expecting GCC 14 on Ubuntu 24.04).
if(NOT DEFINED FLUTTER_TARGET_PLATFORM_SYSROOT)
  find_program(_host_gpp NAMES g++)
  if(_host_gpp)
    execute_process(
      COMMAND ${_host_gpp} -print-file-name=libstdc++.so
      OUTPUT_VARIABLE _host_libstdcpp
      OUTPUT_STRIP_TRAILING_WHITESPACE
      ERROR_QUIET
    )
    if(_host_libstdcpp AND NOT _host_libstdcpp STREQUAL "libstdc++.so")
      get_filename_component(_host_libstdcpp_dir "${_host_libstdcpp}" DIRECTORY)
      if(NOT _host_libstdcpp_dir STREQUAL "")
        get_filename_component(_gcc_triple "${_host_libstdcpp_dir}" DIRECTORY)
        get_filename_component(_gcc_triple "${_gcc_triple}" NAME)
        get_filename_component(_gcc_version "${_host_libstdcpp_dir}" NAME)

        set(_stdcpp_include_candidates
          "${_host_libstdcpp_dir}/include"
          "/usr/include/c++/${_gcc_version}"
          "/usr/include/${_gcc_triple}/c++/${_gcc_version}")

        set(_stdcpp_include_paths "")
        foreach(_candidate IN LISTS _stdcpp_include_candidates)
          if(EXISTS "${_candidate}")
            list(APPEND _stdcpp_include_paths "${_candidate}")
          endif()
        endforeach()

        if(NOT _stdcpp_include_paths STREQUAL "")
          list(REMOVE_DUPLICATES _stdcpp_include_paths)
          string(JOIN ":" _stdcpp_include_env ${_stdcpp_include_paths})
          if("$ENV{CPLUS_INCLUDE_PATH}" STREQUAL "")
            set(ENV{CPLUS_INCLUDE_PATH} "${_stdcpp_include_env}")
          else()
            set(ENV{CPLUS_INCLUDE_PATH}
              "${_stdcpp_include_env}:$ENV{CPLUS_INCLUDE_PATH}")
          endif()

          set(_stdcpp_include_flags "")
          foreach(_include_dir IN LISTS _stdcpp_include_paths)
            set(_stdcpp_include_flags
              "${_stdcpp_include_flags} -isystem ${_include_dir}")
          endforeach()
          set(CMAKE_CXX_FLAGS_INIT "${CMAKE_CXX_FLAGS_INIT}${_stdcpp_include_flags}")
        endif()

        if("$ENV{LIBRARY_PATH}" STREQUAL "")
          set(ENV{LIBRARY_PATH} "${_host_libstdcpp_dir}")
        else()
          set(ENV{LIBRARY_PATH}
            "${_host_libstdcpp_dir}:$ENV{LIBRARY_PATH}")
        endif()

        set(CMAKE_EXE_LINKER_FLAGS_INIT
          "${CMAKE_EXE_LINKER_FLAGS_INIT} -L${_host_libstdcpp_dir}")
        set(CMAKE_SHARED_LINKER_FLAGS_INIT
          "${CMAKE_SHARED_LINKER_FLAGS_INIT} -L${_host_libstdcpp_dir}")
        set(CMAKE_MODULE_LINKER_FLAGS_INIT
          "${CMAKE_MODULE_LINKER_FLAGS_INIT} -L${_host_libstdcpp_dir}")
      endif()
    endif()
  endif()
endif()

project(runner LANGUAGES CXX)

# The name of the executable created for the application. Change this to change
# the on-disk name of your application.
set(BINARY_NAME "mostro_client")
# The unique GTK application identifier for this application. See:
# https://wiki.gnome.org/HowDoI/ChooseApplicationID
set(APPLICATION_ID "network.mostro.app")

# Explicitly opt in to modern CMake behaviors to avoid warnings with recent
# versions of CMake.
cmake_policy(SET CMP0063 NEW)

# Load bundled libraries from the lib/ directory relative to the binary.
set(CMAKE_INSTALL_RPATH "$ORIGIN/lib")

# Root filesystem for cross-building.
if(FLUTTER_TARGET_PLATFORM_SYSROOT)
  set(CMAKE_SYSROOT ${FLUTTER_TARGET_PLATFORM_SYSROOT})
  set(CMAKE_FIND_ROOT_PATH ${CMAKE_SYSROOT})
  set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
  set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)
  set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
  set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
endif()

# Define build configuration options.
if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
  set(CMAKE_BUILD_TYPE "Debug" CACHE
    STRING "Flutter build mode" FORCE)
  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS
    "Debug" "Profile" "Release")
endif()

# Compilation settings that should be applied to most targets.
#
# Be cautious about adding new options here, as plugins use this function by
# default. In most cases, you should add new options to specific targets instead
# of modifying this function.
function(APPLY_STANDARD_SETTINGS TARGET)
  target_compile_features(${TARGET} PUBLIC cxx_std_14)
  target_compile_options(${TARGET} PRIVATE -Wall -Werror)
  target_compile_options(${TARGET} PRIVATE "$<$<NOT:$<CONFIG:Debug>>:-O3>")
  target_compile_definitions(${TARGET} PRIVATE "$<$<NOT:$<CONFIG:Debug>>:NDEBUG>")
endfunction()

# Flutter library and tool build rules.
set(FLUTTER_MANAGED_DIR "${CMAKE_CURRENT_SOURCE_DIR}/flutter")
add_subdirectory(${FLUTTER_MANAGED_DIR})

# System-level dependencies.
find_package(PkgConfig REQUIRED)
pkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)

add_definitions(-DAPPLICATION_ID="${APPLICATION_ID}")

# Define the application target. To change its name, change BINARY_NAME above,
# not the value here, or `flutter run` will no longer work.
#
# Any new source files that you add to the application should be added here.
add_executable(${BINARY_NAME}
  "main.cc"
  "my_application.cc"
  "${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc"
)

# Apply the standard set of build settings. This can be removed for applications
# that need different build settings.
apply_standard_settings(${BINARY_NAME})

# Add dependency libraries. Add any application-specific dependencies here.
target_link_libraries(${BINARY_NAME} PRIVATE flutter)
target_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)

# Run the Flutter tool portions of the build. This must not be removed.
add_dependencies(${BINARY_NAME} flutter_assemble)

# Only the install-generated bundle's copy of the executable will launch
# correctly, since the resources must in the right relative locations. To avoid
# people trying to run the unbundled copy, put it in a subdirectory instead of
# the default top-level location.
set_target_properties(${BINARY_NAME}
  PROPERTIES
  RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/intermediates_do_not_run"
)


# Generated plugin build rules, which manage building the plugins and adding
# them to the application.
include(flutter/generated_plugins.cmake)


# === Installation ===
# Make "install" ALWAYS copy into the build tree (not /usr/local)
set(BUILD_BUNDLE_DIR "${PROJECT_BINARY_DIR}/bundle")
set(CMAKE_INSTALL_PREFIX "${BUILD_BUNDLE_DIR}" CACHE PATH "..." FORCE)

# Clean the bundle before each installation
install(CODE "
  file(REMOVE_RECURSE \"${BUILD_BUNDLE_DIR}/\")
  " COMPONENT Runtime)

set(INSTALL_BUNDLE_DATA_DIR "${CMAKE_INSTALL_PREFIX}/data")
set(INSTALL_BUNDLE_LIB_DIR "${CMAKE_INSTALL_PREFIX}/lib")

# Binary
install(TARGETS ${BINARY_NAME} RUNTIME DESTINATION "${CMAKE_INSTALL_PREFIX}"
  COMPONENT Runtime)

# ICU + libflutter
install(FILES "${FLUTTER_ICU_DATA_FILE}" DESTINATION "${INSTALL_BUNDLE_DATA_DIR}"
  COMPONENT Runtime)
install(FILES "${FLUTTER_LIBRARY}" DESTINATION "${INSTALL_BUNDLE_LIB_DIR}"
  COMPONENT Runtime)

# Native Plugins (if any)
foreach(bundled_library ${PLUGIN_BUNDLED_LIBRARIES})
  install(FILES "${bundled_library}"
    DESTINATION "${INSTALL_BUNDLE_LIB_DIR}"
    COMPONENT Runtime)
endforeach()

# Copy the native assets provided by the build.dart from all packages.
set(NATIVE_ASSETS_DIR "${PROJECT_BUILD_DIR}native_assets/linux/")
install(DIRECTORY "${NATIVE_ASSETS_DIR}"
  DESTINATION "${INSTALL_BUNDLE_LIB_DIR}"
  COMPONENT Runtime)

# Fully re-copy the assets directory on each build to avoid having stale files
# from a previous install.
set(FLUTTER_ASSET_DIR_NAME "flutter_assets")
install(CODE "
  file(REMOVE_RECURSE \"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\")
  " COMPONENT Runtime)
install(DIRECTORY "${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}"
  DESTINATION "${INSTALL_BUNDLE_DATA_DIR}" COMPONENT Runtime)

# Install the AOT library on non-Debug builds only.
if(NOT CMAKE_BUILD_TYPE MATCHES "Debug")
  install(FILES "${AOT_LIBRARY}" DESTINATION "${INSTALL_BUNDLE_LIB_DIR}"
    COMPONENT Runtime)
endif()
