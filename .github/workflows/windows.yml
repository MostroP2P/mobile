name: Build Flutter Windows Desktop

on:
  push:
    tags: ['v*.*.*']          # run only when a tag like v1.2.3 is pushed
  workflow_dispatch:

jobs:
  windows-build:
    runs-on: windows-latest   # GitHub-hosted Windows runner

    steps:
      # 1. Check-out source
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Install Flutter
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          flutter-version: '3.32.2'   # match version from main.yml

      # 3. Configure Flutter (disable analytics, accept licenses)
      - name: Configure Flutter
        run: |
          flutter config --no-analytics
          flutter config --enable-windows-desktop
          
      # 4. Accept SDK licenses non-interactively (if Android SDK is present)
      - name: Accept licenses
        run: |
          "y" * 100 | flutter doctor --android-licenses
        shell: pwsh
        continue-on-error: true

      # 5. Install project dependencies
      - name: Install dependencies
        run: flutter pub get

      # 6. Generate localization and other required files
      - name: Generate required files
        run: dart run build_runner build -d

      # 7. Extract version from pubspec.yaml
      - name: Extract version
        id: extract_version
        run: |
          $version = (Select-String -Path pubspec.yaml -Pattern '^version: ').Line -replace 'version: ',''
          $version = $version.Trim()
          echo "VERSION=$version" >> $env:GITHUB_ENV
          echo "version=$version" >> $env:GITHUB_OUTPUT
          echo "Version: $version"
        shell: pwsh

      # 8. Analyze code (optional but recommended)
      - name: Analyze code
        run: flutter analyze
        continue-on-error: true   # don't fail build on warnings

      # 9. Build Windows release
      - name: Build Windows release
        run: flutter build windows --release

      # 10. Create zip package for distribution
      - name: Package Windows build
        run: |
          $version = "${{ steps.extract_version.outputs.version }}"
          cd build/windows/x64/runner/Release
          Compress-Archive -Path * -DestinationPath "../../../../../mostro_mobile-$version-windows-x64.zip"
          cd ../../../../../
          echo "Created: mostro_mobile-$version-windows-x64.zip"
        shell: pwsh

      # 11. Upload as artifact (backup)
      - name: Upload Windows build artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-release
          path: mostro_mobile-${{ steps.extract_version.outputs.version }}-windows-x64.zip

      # 12. Create GitHub Release and upload
      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "mostro_mobile-${{ steps.extract_version.outputs.version }}-windows-x64.zip"
          tag: v${{ steps.extract_version.outputs.version }}
          allowUpdates: true
          omitBodyDuringUpdate: true
          replacesArtifacts: true
